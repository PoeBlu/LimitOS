#!/usr/bin/env bash
# the preceding line instructs this script to run using the bash interpreter

# main function definition
perform_install()
{
  # echo: output a message to the screen
  echo 'Starting installation...'

  # install nodejs
  #install_nodejs

  # install pm2 to run the limitos javascript process via node
  install_pm2

  # download the limitos.js file
  download_limitos_js

  # output the registration information
  echo "Register this device within 5 minutes at <%= full_url %>/register"
  echo "Registration code: $registration_auth_token"
}

# function to install nodejs
function install_nodejs()
{
  # output pm2 installation message
  echo 'Installing node.js...'

  # remove old versions of node and npm
  sudo apt-get remove nodered -y
  sudo apt-get remove nodejs nodejs-legacy -y
  sudo apt-get remove npm -y
  # install new version of nodejs
  sudo curl -sL https://deb.nodesource.com/setup_6.x | sudo bash -
  sudo apt-get install -y nodejs
}

# function to install pm2
function install_pm2()
{
  # output pm2 installation message
  echo 'Installing pm2 node.js process manager...'

  # install the pm2 module, and log output
  # command -v checks the version of pm2 installed globally, >/dev/null 2>&1: suppresses output
  # npm install: installs module via npm, -g: installs globally for command line use
  command -v pm2 >/dev/null 2>&1 || sudo npm install pm2@2.9.3 -g &> 'limitos<%= 'dev' if !Rails.env.production? %>_install.log'

  # start the limitos<%= '_dev' if !Rails.env.production? %>.js node script, -s: silent mode
  sudo pm2 -s start limitos<%= '_dev' if !Rails.env.production? %>.js

  # start pm2 when server is started, and log output
  sudo pm2 startup &> 'limitos<%= 'dev' if !Rails.env.production? %>_install.log'

  # save the current limitos<%= '_dev' if !Rails.env.production? %>.js process
  sudo pm2 -s save
}

# function to download limitos.js
function download_limitos_js()
{
  # create a new device and save the auth_token as device_json
  # curl: request a remote url, -s: silent, -S: show errors, -L: follow redirects, -X POST: use a HTTP POST request
  device_json=$(curl -sSL -X POST <%= full_url %>/api/v1/devices)

  # get the device id from the JSON
  # grep: search, -P: use Perl regular expressions, -o: only output the match, '"id":(\d*)': look for "id":(digits)
  # awk: pattern manipulation, -F':': separate by ':', print $2: print the second match
  device_id=$(echo $device_json | grep -Po '"id":(\d*)' | awk -F':' '{print $2}')

  # get the auth token from the JSON
  # '"auth_token":.*?[^\\]"': look for "auth_token":"xxxxxx", tr -d '"': delete quotes
  device_auth_token=$(echo $device_json | grep -Po '"auth_token":.*?[^\\]"' | awk -F':' '{print $2}' | tr -d '"')

  # get a new registration code (using the device auth_token)
  registration_json=$(curl -sSL --data "auth_token=$device_auth_token" <%= full_url %>/api/v1/devices/$device_id/registrations)

  # get the auth token from the JSON
  registration_auth_token=$(echo $registration_json | grep -Po '"auth_token":.*?[^\\]"' | awk -F':' '{print $2}' | tr -d '"')

  # retrieve the nodejs script and save it as limitos.js
  curl -sSL --data "auth_token=$device_auth_token" <%= full_url %>/api/v1/devices/$device_id/nodejs_script > limitos<%= '_dev' if !Rails.env.production? %>.js
}

# run the main function
perform_install
