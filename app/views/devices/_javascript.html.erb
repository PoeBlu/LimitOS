<script>

  <% @device.analog_pins.each do |pin| %>
    // initialize this slider
    var slider_<%= pin.pin_number %> = new Slider("#slider_<%= pin.pin_number %>", {
      tooltip: 'hide'
    });
  <% end %>

  // keep track of the start transmission time
  var start_transmission_time = 0;

  // when the document is ready
  $(document).ready(function() {

    <% @device.analog_pins.each do |pin| %>
      // when the slider is moved
      slider_<%= pin.pin_number %>.on('change', function() {
        // get the slider value
        var slider_value = slider_<%= pin.pin_number %>.getValue();
        // update the text input
        $('#servo_input_' + <%= pin.pin_number %>).val(slider_value);
        // send the value via the master device
        sendServoMessage({ i2c_address: '<%= @device.i2c_address %>', pin: <%= pin.pin_number %>, servo: slider_value });
      });

      // when the servo form is submitted
      $('#servo_form_<%= pin.pin_number %>').submit(function() {
        // get the input value
        var input_value = $('#servo_input_' + <%= pin.pin_number %>).val();
        // update the slider value
        slider_<%= pin.pin_number %>.setValue(input_value);
        // send the value via the master device
        sendServoMessage({ i2c_address: '<%= @device.i2c_address %>', pin: <%= pin.pin_number %>, servo: input_value });
        // don't reload the page
        return false;
      });
    <% end %>

    // when the digital on/off button is clicked
    $('.digital_submit').on('click', function() {
      // remove active class
      $('.pin_' + $(this).data('pin') + '_buttons').removeClass('active');
      // blur the button to make it unfocused
      $('.pin_' + $(this).data('pin') + '_buttons').blur();
      // create the message
      var message = { i2c_address: '<%= @device.i2c_address %>', pin: $(this).data('pin'), digital: $(this).data('digital') };
      // send the message
      App.messaging.send_message(message);
    });

    // create the subscription
    App.messaging = App.cable.subscriptions.create(
      {
        channel: 'DevicesChannel',
        id: <%= @master_device.id %>,
        auth_token: '<%= @master_device.auth_token %>'
      },
      {

        // when data is received
        received: function(data) {
          // if we've sent a message from the webpage
          if (start_transmission_time !== 0) {
            // calculate the delay
            $('#delay').text(((new Date).getTime() - start_transmission_time) + 'ms');
          }

          // get the data as a string
          var data_string = JSON.stringify(data);
          // update the status
          $('#device_status').text(data_string);

          // if we should log commands
          if ($('#log_commands_checkbox').is(':checked')) {
            // show the logs
            $('#device_logs').removeClass('hide');
            // log the data
            $('#device_logs').text(data_string + "\n" + $('#device_logs').text());
          }

          // if this is a digital command
          if (data.digital) {
            // remove the active class
            $('.pin_' + data.pin + '_buttons').removeClass('active');
            // blur the buttons in case they're focused
            $('.pin_' + data.pin + '_buttons').blur();
            // make the appropriate button active
            $('#pin_' + data.pin + '_' + data.digital).addClass('active');
          // else if this is a servo command
          } else if (data.servo) {
            // update the slider value
            window['slider_' + data.pin].setValue(data.servo);
            // update the text input
            $('#servo_input_' + data.pin).val(data.servo);
          }

        },

        // function to send a message
        send_message: function(message) {
          // mark the start time
          start_transmission_time = (new Date).getTime();

          // perform the "receive" action in app/channels/devices_channel.rb
          this.perform('receive', message);
        }

      }
    );

  });

  // send servo position
  function sendServoMessage(message) {
    // send the message
    App.messaging.send_message(message);
  }

</script>
