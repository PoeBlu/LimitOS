<% if @device.video_enabled? %>
  <% content_for :custom_head do %>
    <%= javascript_include_tag 'jsmpeg.min' %>
  <% end %>
<% end %>

<% if @owner == true %>
  <a href="/control/<%= @device.id %>/edit" id="control-settings">
    <span class="glyphicon glyphicon-cog" style="padding: 0 0 0 3px;"></span>
  </a>
<% end %>

<% if @device.control_template.blank? || @device.control_template == 'default' %>

  <%= render 'default' %>

<% elsif @device.control_template == 'drive' %>

  <%= render 'drive' %>

<% end %>

<script>

  // keep track of the start transmission time
  var start_transmission_time = 0;
  // keep track of the video player
  var video_player = null;
  // keep track of the video timeout
  var video_timeout = null;
  // keep track of whether the video is currently playing
  var video_active = false;
  // keep track of the stop motors timeout
  var stop_motors_timeout = null;

  // when the document is ready
  $(document).ready(function() {

    // when user activity is detected
    $('body').on('mousemove mousedown touchstart touchmove', function() {
      // only detect activity if video has been played
      if (video_active === true) { activityDetected(); }
    });

    // when the drive-forward button is clicked
    $('#drive-forward').on('mousedown touchstart', function() {
      // create the message
      var message = { synchronization_id: <%= @device.synchronizations.find_by(name: 'forward').try(:id) %> };
      // send the message
      App.messaging.send_message(message);
    });

    // when the drive-reverse button is clicked
    $('#drive-reverse').on('mousedown touchstart', function() {
      // clear the current timeout
      clearTimeout(stop_motors_timeout);
      // create the message
      var message = { i2c_address: '<%= @device.i2c_address %>', pin: 20, digital: 'off' };
      // send the message
      App.messaging.send_message(message);
      // create the message
      var message = { i2c_address: '<%= @device.i2c_address %>', pin: 26, digital: 'off' };
      // send the message
      App.messaging.send_message(message);
      // create the message
      var message = { i2c_address: '<%= @device.i2c_address %>', pin: 21, digital: 'on' };
      // send the message
      App.messaging.send_message(message);
      // create the message
      var message = { i2c_address: '<%= @device.i2c_address %>', pin: 19, digital: 'on' };
      // send the message
      App.messaging.send_message(message);
    });

    // when the drive-left button is clicked
    $('#drive-left').on('mousedown touchstart', function() {
      // clear the current timeout
      clearTimeout(stop_motors_timeout);
      // create the message
      var message = { i2c_address: '<%= @device.i2c_address %>', pin: 19, digital: 'off' };
      // send the message
      App.messaging.send_message(message);
      // create the message
      var message = { i2c_address: '<%= @device.i2c_address %>', pin: 20, digital: 'off' };
      // send the message
      App.messaging.send_message(message);
      // create the message
      var message = { i2c_address: '<%= @device.i2c_address %>', pin: 21, digital: 'off' };
      // send the message
      App.messaging.send_message(message);
      // create the message
      var message = { i2c_address: '<%= @device.i2c_address %>', pin: 26, digital: 'on' };
      // send the message
      App.messaging.send_message(message);
    });

    // when the drive-right button is clicked
    $('#drive-right').on('mousedown touchstart', function() {
      // clear the current timeout
      clearTimeout(stop_motors_timeout);
      // create the message
      var message = { i2c_address: '<%= @device.i2c_address %>', pin: 19, digital: 'off' };
      // send the message
      App.messaging.send_message(message);
      // create the message
      var message = { i2c_address: '<%= @device.i2c_address %>', pin: 26, digital: 'off' };
      // send the message
      App.messaging.send_message(message);
      // create the message
      var message = { i2c_address: '<%= @device.i2c_address %>', pin: 21, digital: 'off' };
      // send the message
      App.messaging.send_message(message);
      // create the message
      var message = { i2c_address: '<%= @device.i2c_address %>', pin: 20, digital: 'on' };
      // send the message
      App.messaging.send_message(message);
    });

    // when the mouse is released
    $('#drive-right, #drive-left, #drive-forward, #drive-reverse').on('mouseup touchend', function() {
      // stop all motors
  //    stopMotors();

      // add a 50ms timeout to stop all motors
      stopMotorsTimeout = setTimeout(function() {
    //    stopMotors();
      }, 50);
    });

    // stop all motors
    function stopMotors() {
      // create the message
      var message = { i2c_address: '<%= @device.i2c_address %>', pin: 19, digital: 'off' };
      // send the message
      App.messaging.send_message(message);
      // create the message
      var message = { i2c_address: '<%= @device.i2c_address %>', pin: 20, digital: 'off' };
      // send the message
      App.messaging.send_message(message);
      // create the message
      var message = { i2c_address: '<%= @device.i2c_address %>', pin: 21, digital: 'off' };
      // send the message
      App.messaging.send_message(message);
      // create the message
      var message = { i2c_address: '<%= @device.i2c_address %>', pin: 26, digital: 'off' };
      // send the message
      App.messaging.send_message(message);
    }

    // create the subscription
    App.messaging = App.cable.subscriptions.create(
      {
        channel: 'DevicesChannel',
        id: <%= @master_device.id %>,
        auth_token: '<%= @master_device.private? ? @master_device.auth_token : nil %>'
      },
      {

        // when data is received
        received: function(data) {

        },

        // function to send a message
        send_message: function(message) {
          // mark the start time
          start_transmission_time = (new Date).getTime();

          // perform the "receive" action in app/channels/devices_channel.rb
          this.perform('receive', message);
        }

      }
    );

    <% if @device.video_enabled? %>
      // start video on page load, with a slight delay to make sure everything has loaded
      setTimeout(function() {
        startVideo();
      }, 1000);
    <% end %>

  });

  // new user activity is detected
  function activityDetected() {
    // clear the current timeout
    clearTimeout(video_timeout);

    // set new timeout for 10 minutes
    video_timeout = setTimeout(function() {
      // stop video
      stopVideo();
    }, 600000);
  }

  // start the video
  function startVideo() {
    // mark the video as started
    video_active = true;
    // hide the button
    $('#video_start').addClass('hidden');
    // show the canvas
    $('#video_canvas').removeClass('hidden');
    // create the message
    var message = { command: 'start_video' };
    // send the message to start the video
    App.messaging.send_message(message);
    // set the video url
    var video_server_url = '<%= @device.video_to_clients_url %>';
    // load the video
    video_player = new JSMpeg.Player(video_server_url, {canvas: $('#video_canvas')[0]});
    // show the stop button
    $('#video_stop').removeClass('hidden');
  }

  // stop the video
  function stopVideo() {
    // mark the video as stopped
    video_active = false;
    // hide the button
    $('#video_stop').addClass('hidden');
    // hide the canvas
    $('#video_canvas').addClass('hidden');
    // disconnect the video
    video_player.destroy();
    // show the start button
    $('#video_start').removeClass('hidden');
  }
</script>
