<% if @device.video_enabled? %>
  <% content_for :custom_head do %>
    <%= javascript_include_tag 'jsmpeg.min' %>
  <% end %>
<% end %>

<% if @owner == true %>
  <a href="/control/<%= @device.id %>/edit" id="control-settings">
    <span class="glyphicon glyphicon-cog" style="padding: 0 0 0 3px;"></span>
  </a>
<% end %>

<% if @device.control_template.blank? || @device.control_template == 'default' %>

  <%= render 'default' %>

<% elsif @device.control_template == 'drive' %>

  <%= render 'drive' %>

<% end %>

<script>

  <% @device.analog_pins.each do |pin| %>
    // initialize this slider
    var slider_<%= pin.pin_number %> = new Slider("#slider_<%= pin.pin_number %>", {
      tooltip: 'hide'
    });
  <% end %>

  // when the document is ready
  $(document).ready(function() {


    <% @device.analog_pins.each do |pin| %>
      // when the slider is moved
      slider_<%= pin.pin_number %>.on('change', function() {
        // get the slider value
        var slider_value = slider_<%= pin.pin_number %>.getValue();
        // update the text input
        $('#servo_input_' + <%= pin.pin_number %>).val(slider_value);
        // send the value via the master device
        sendServoMessage({ i2c_address: '<%= @device.i2c_address %>', pin: <%= pin.pin_number %>, servo: slider_value });
      });

      // when the servo form is submitted
      $('#servo_form_<%= pin.pin_number %>').submit(function() {
        // get the input value
        var input_value = $('#servo_input_' + <%= pin.pin_number %>).val();
        // update the slider value
        slider_<%= pin.pin_number %>.setValue(input_value);
        // send the value via the master device
        sendServoMessage({ i2c_address: '<%= @device.i2c_address %>', pin: <%= pin.pin_number %>, servo: input_value });
        // don't reload the page
        return false;
      });
    <% end %>

    // when the digital on/off button is clicked
    $('.digital_submit').on('click', function() {
      // remove active class
      $('.pin_' + $(this).data('pin') + '_buttons').removeClass('active');
      // blur the button to make it unfocused
      $('.pin_' + $(this).data('pin') + '_buttons').blur();
      // create the message
      var message = { i2c_address: '<%= @device.i2c_address %>', pin: $(this).data('pin'), digital: $(this).data('digital') };
      // send the message
      App.messaging.send_message(message);
    });

    // send a synchronization message by id
    function sendSynchronization(synchronization_id) {
      // create the message
      var message = { synchronization_id: synchronization_id };
      // send the message
      App.messaging.send_message(message);
    }

    // send an opposite synchronization message by id
    function sendOppositeSynchronization(synchronization_id) {
      // create the message
      var message = { synchronization_id: synchronization_id, opposite: 'true' };
      // send the message
      App.messaging.send_message(message);
    }

    // for each control type ('forward', 'backward', 'left', 'right')
    <% Device::DRIVE_CONTROL_TYPES.each do |device_control_type| %>

      // when the control button is clicked
      $('#drive-<%= device_control_type %>').on('mousedown touchstart', function() {
        // highlight the button
        $(this).addClass('active');
        // send the synchronization
        sendSynchronization('<%= @device.synchronizations.find_by(name: device_control_type).try(:id) %>');
      });

      // when the control button is released
      $('#drive-<%= device_control_type %>').on('mouseup touchend', function() {
        // remove the highlight
        $(this).removeClass('active');
        // send the opposite synchronization
        sendOppositeSynchronization('<%= @device.synchronizations.find_by(name: device_control_type).try(:id) %>');

        // add a 100ms timeout to stop the synchronization
        stopMotorsTimeout = setTimeout(function() {
          // send the opposite synchronization
          sendOppositeSynchronization('<%= @device.synchronizations.find_by(name: device_control_type).try(:id) %>');
        }, 100);
      });

    <% end %>

    // create the subscription
    App.messaging = App.cable.subscriptions.create(
      {
        channel: 'DevicesChannel',
        id: <%= @master_device.id %>,
        auth_token: '<%= @master_device.private? ? @master_device.auth_token : nil %>'
      },
      {

        // when data is received
        received: function(data) {

        },

        // function to send a message
        send_message: function(message) {
          // mark the start time
          start_transmission_time = (new Date).getTime();

          // perform the "receive" action in app/channels/devices_channel.rb
          this.perform('receive', message);
        }

      }
    );

    <% if @device.video_enabled? %>
      // start video on page load, with a slight delay to make sure everything has loaded
      setTimeout(function() {
        startVideo();
      }, 1000);
    <% end %>

  });

  // start the video
  function startVideo() {
    // mark the video as started
    video_active = true;
    // hide the button
    $('#video_start').addClass('hidden');
    // show the canvas
    $('#video_canvas').removeClass('hidden');
    // create the message
    var message = { command: 'start_video' };
    // send the message to start the video
    App.messaging.send_message(message);
    // set the video url
    var video_server_url = '<%= @device.video_to_clients_url %>';
    // load the video
    video_player = new JSMpeg.Player(video_server_url, {canvas: $('#video_canvas')[0]});
    // show the stop button
    $('#video_stop').removeClass('hidden');
  }

  // stop the video
  function stopVideo() {
    // mark the video as stopped
    video_active = false;
    // hide the button
    $('#video_stop').addClass('hidden');
    // hide the canvas
    $('#video_canvas').addClass('hidden');
    // disconnect the video
    video_player.destroy();
    // show the start button
    $('#video_start').removeClass('hidden');
  }
</script>
